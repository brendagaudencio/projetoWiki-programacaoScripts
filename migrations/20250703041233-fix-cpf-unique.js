'use strict';

module.exports = {
  async up(queryInterface, Sequelize) {
    console.log('üîß Aplicando corre√ß√£o permanente do CPF...');
    
    // Remover TODOS os √≠ndices UNIQUE do CPF que possam existir
    const uniqueIndexes = [
      'colaboracoes_cpf_unique',
      'colaboracoes_cpf', 
      'Colaboracoes_cpf_unique',
      'Colaboracoes_cpf'
    ];

    for (const indexName of uniqueIndexes) {
      try {
        await queryInterface.sequelize.query(`DROP INDEX IF EXISTS ${indexName}`);
        console.log(`   ‚úÖ Removido √≠ndice: ${indexName}`);
      } catch (error) {
        console.log(`   ‚ÑπÔ∏è √çndice ${indexName} n√£o encontrado`);
      }
    }

    // Garantir que existe apenas √≠ndice de performance (n√£o-unique)
    try {
      // Verificar se j√° existe
      const [results] = await queryInterface.sequelize.query(`
        SELECT name FROM sqlite_master 
        WHERE type='index' AND name='colaboracoes_cpf_performance'
      `);

      if (results.length === 0) {
        await queryInterface.addIndex('Colaboracoes', ['cpf'], {
          name: 'colaboracoes_cpf_performance',
          unique: false
        });
        console.log('   ‚úÖ Criado √≠ndice de performance (n√£o-unique)');
      } else {
        console.log('   ‚ÑπÔ∏è √çndice de performance j√° existe');
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è Erro ao criar √≠ndice de performance:', error.message);
    }

    // Verificar estado final
    const [finalIndexes] = await queryInterface.sequelize.query(`
      SELECT name FROM sqlite_master 
      WHERE type='index' AND tbl_name='Colaboracoes' AND name LIKE '%cpf%'
    `);
    
    console.log('üìã √çndices do CPF ap√≥s corre√ß√£o:');
    finalIndexes.forEach(index => {
      console.log(`   - ${index.name}`);
    });

    console.log('‚úÖ Corre√ß√£o permanente aplicada');
  },

  async down(queryInterface, Sequelize) {
    // Para reverter, n√£o fazer nada - manter corre√ß√£o
    console.log('‚ÑπÔ∏è Corre√ß√£o permanente mantida (n√£o revertida)');
  }
};